Public rejectComment As String

Function GetColumnIndex(ws As Worksheet, headerName As String, headerRow As Long) As Long
    Dim col As Long
    For col = 1 To ws.Cells(headerRow, ws.Columns.Count).End(xlToLeft).Column
        If Trim(ws.Cells(headerRow, col).Value) = headerName Then
            GetColumnIndex = col
            Exit Function
        End If
    Next col
    GetColumnIndex = 0
End Function

Function FindLatestAssignmentInfo(taskID As String) As String
    Dim wsLog As Worksheet: Set wsLog = Sheets("Assigned_Tasks")
    Dim lastRow As Long: lastRow = wsLog.Cells(wsLog.Rows.Count, 1).End(xlUp).Row
    Dim i As Long
    For i = lastRow To 2 Step -1
        If wsLog.Cells(i, 1).Value = taskID Then
            Dim assignee As String: assignee = wsLog.Cells(i, 4).Value
            Dim assignDate As Variant: assignDate = wsLog.Cells(i, 5).Value
            Dim scopeName As String: scopeName = wsLog.Cells(i, 3).Value
            If assignee <> "" And assignDate <> "" Then
                FindLatestAssignmentInfo = assignee & " on " & Format(assignDate, "yyyy-mm-dd") & " from scope " & scopeName
            End If
            Exit Function
        End If
    Next i
    FindLatestAssignmentInfo = ""
End Function

Sub AssignTasks(clientName As String, scopeType As String, callingForm As Object)
    Dim wsScope As Worksheet, wsMAKRO As Worksheet, wsLog As Worksheet, wsEmp As Worksheet
    Set wsScope = Sheets("Scope")
    Set wsMAKRO = Sheets("MAKRO")
    Set wsLog = Sheets("Assigned_Tasks")
    Set wsEmp = Sheets("Employees")

    Dim exclusion As String
    Dim empRow As Range: Set empRow = wsEmp.Range("A:A").Find(clientName, LookIn:=xlValues)
    If Not empRow Is Nothing Then exclusion = empRow.Offset(0, 1).Value

    Dim scopeStart As Range
    If scopeType = "Standard" Then
        Set scopeStart = wsScope.Range("C8")
    Else
        Set scopeStart = wsScope.Range("F8")
    End If

    Dim taskName As String, taskCount As Integer, r As Long: r = 0
    Do While scopeStart.Offset(r, 0).Value <> ""
        taskName = scopeStart.Offset(r, 0).Value
        taskCount = scopeStart.Offset(r, 1).Value

        If taskName = exclusion Then
            taskName = "OEDD": taskCount = taskCount + 1
        End If

        Dim wsTasks As Worksheet: On Error Resume Next: Set wsTasks = Sheets(taskName): On Error GoTo 0
        If wsTasks Is Nothing Then r = r + 1: GoTo NextScope

        Dim colTask As Long, colDue As Long, colOwner As Long
        colTask = GetColumnIndex(wsTasks, "Task", 1)
        colDue = GetColumnIndex(wsTasks, "Due Date", 1)
        colOwner = GetColumnIndex(wsTasks, "FINAL OWNER", 1)
        If colTask * colDue * colOwner = 0 Then r = r + 1: GoTo NextScope

        Dim j As Long, found As Long: found = 0
        For j = 2 To wsTasks.Cells(wsTasks.Rows.Count, colTask).End(xlUp).Row
            If wsTasks.Cells(j, colOwner).Value = "" Then
                Dim taskID As String: taskID = wsTasks.Cells(j, colTask).Value
                Dim dueDate As Variant: dueDate = wsTasks.Cells(j, colDue).Value
                Dim comment As String: comment = FindLatestAssignmentInfo(taskID)

                Dim logRow As Long: logRow = wsLog.Cells(wsLog.Rows.Count, 1).End(xlUp).Row + 1
                With wsLog
                    .Cells(logRow, 1).Value = taskID
                    .Cells(logRow, 2).Value = dueDate
                    .Cells(logRow, 3).Value = taskName
                    If comment = "" Then
                        .Cells(logRow, 4).Value = clientName
                        .Cells(logRow, 5).Value = Date
                        .Cells(logRow, 6).Value = "Assigned"
                        wsTasks.Cells(j, colOwner).Value = clientName
                    Else
                        .Cells(logRow, 4).Value = "to be verified ‚Äì case already assigned to: " & comment
                        .Cells(logRow, 5).Value = ""
                        .Cells(logRow, 6).Value = "Duplicate ‚Äì verify manually"
                        wsTasks.Cells(j, colOwner).Value = "RESERVED ‚Äì " & clientName
                    End If
                End With

                Dim mRow As Long: mRow = wsMAKRO.Cells(wsMAKRO.Rows.Count, 1).End(xlUp).Row + 1
                wsMAKRO.Cells(mRow, 1).Value = taskID
                wsMAKRO.Cells(mRow, 2).Value = dueDate
                wsMAKRO.Cells(mRow, 4).Value = taskName
                If comment = "" Then
                    wsMAKRO.Cells(mRow, 5).Value = clientName
                    wsMAKRO.Cells(mRow, 6).Value = "Assigned"
                Else
                    wsMAKRO.Cells(mRow, 5).Value = "to be verified ‚Äì case already assigned to: " & comment
                    wsMAKRO.Cells(mRow, 6).Value = "to verify"
                    AddVerificationButtons wsMAKRO, mRow
                End If

                found = found + 1
                If found = taskCount Then Exit For
            End If
        Next j
        r = r + 1
NextScope: Loop

    MsgBox "Przypisano zadania dla " & clientName, vbInformation
    Unload callingForm
End Sub

Sub AddVerificationButtons(ws As Worksheet, rowIndex As Long)
    Dim btnDo As Button, btnReject As Button
    Set btnDo = ws.Buttons.Add(ws.Columns(7).Left, ws.Rows(rowIndex).Top, 60, 18)
    With btnDo: .OnAction = "DoTask": .Caption = "‚úÖ Do Task": .Name = "btnDo_" & rowIndex: End With
    Set btnReject = ws.Buttons.Add(ws.Columns(8).Left, ws.Rows(rowIndex).Top, 60, 18)
    With btnReject: .OnAction = "RejectTask": .Caption = "‚ùå Reject": .Name = "btnReject_" & rowIndex: End With
End Sub

Sub DoTask()
    Dim rowIndex As Long: rowIndex = CLng(Split(Application.Caller, "_")(1))
    Dim ws As Worksheet: Set ws = Sheets("MAKRO")
    ws.Cells(rowIndex, 6).Value = "Confirmed"

    Dim taskID As String: taskID = ws.Cells(rowIndex, 1).Value
    Dim scope As Worksheet: Set scope = Sheets(ws.Cells(rowIndex, 4).Value)
    Dim colTask As Long: colTask = GetColumnIndex(scope, "Task", 1)
    Dim colOwner As Long: colOwner = GetColumnIndex(scope, "FINAL OWNER", 1)

    Dim i As Long
    For i = 2 To scope.Cells(scope.Rows.Count, colTask).End(xlUp).Row
        If scope.Cells(i, colTask).Value = taskID Then
            scope.Cells(i, colOwner).Value = ws.Cells(rowIndex, 5).Value
            Exit For
        End If
    Next i

    ws.Shapes("btnDo_" & rowIndex).Delete
    ws.Shapes("btnReject_" & rowIndex).Delete
End Sub

Sub RejectTask()
    Dim rowIndex As Long: rowIndex = CLng(Split(Application.Caller, "_")(1))
    Dim ws As Worksheet: Set ws = Sheets("MAKRO")

    ' Pobierz dane z wpisu
    Dim taskID As String: taskID = ws.Cells(rowIndex, 1).Value
    Dim scopeName As String: scopeName = ws.Cells(rowIndex, 4).Value

    ' Zapytaj o pow√≥d odrzucenia
    Dim reason As String
    reason = InputBox("Podaj pow√≥d odrzucenia zadania:", "Reject Task")

    If reason <> "" Then
        ' ‚úÖ Zaktualizuj wpis w MAKRO
        ws.Cells(rowIndex, 5).Value = reason
        ws.Cells(rowIndex, 6).Value = "Rejected"

        ' üîÅ Zaktualizuj wpis w Assigned_Tasks
        Dim wsLog As Worksheet: Set wsLog = Sheets("Assigned_Tasks")
        Dim i As Long
        For i = wsLog.Cells(wsLog.Rows.Count, 1).End(xlUp).Row To 2 Step -1
            If wsLog.Cells(i, 1).Value = taskID And wsLog.Cells(i, 6).Value = "Duplicate ‚Äì verify manually" Then
                wsLog.Cells(i, 4).Value = reason
                wsLog.Cells(i, 6).Value = "Rejected"
                Exit For
            End If
        Next i

        ' üßπ Wyczy≈õƒá "RESERVED" z zak≈Çadki scope
        Dim scopeWS As Worksheet: Set scopeWS = Sheets(scopeName)
        Dim colTask As Long: colTask = GetColumnIndex(scopeWS, "Task", 1)
        Dim colOwner As Long: colOwner = GetColumnIndex(scopeWS, "FINAL OWNER", 1)
        Dim j As Long
        For j = 2 To scopeWS.Cells(scopeWS.Rows.Count, colTask).End(xlUp).Row
            If scopeWS.Cells(j, colTask).Value = taskID Then
                scopeWS.Cells(j, colOwner).Value = "" ' usu≈Ñ rezerwacjƒô
                Exit For
            End If
        Next j

        ' üßΩ Usu≈Ñ przyciski z MAKRO
        On Error Resume Next
        ws.Shapes("btnDo_" & rowIndex).Delete
        ws.Shapes("btnReject_" & rowIndex).Delete
        On Error GoTo 0
    End If
End Sub
